<?php
namespace k1;

/**
 * Singleton class that configures the WordPress site
 */
class App {
  public $i18n;
  public $manifests;

  protected $blocks = [];
  protected static $instance;

  public static function init($options = []) {
    if (self::$instance) {
      return self::$instance;
    }

    self::$instance = new App($options);

    return self::$instance;
  }

  /**
   * Get option from ACF options page. Set $languageSlug to false
   * to disable option name lookup. That's useful if you have options that are not translated.
   */
  public function getOption($x, $languageSlug = null) {
    $optionName = $languageSlug === false ? $x : $this->i18n->getOptionName($x, $languageSlug);

    return \get_field($optionName, 'options');
  }

  public function getBlock($name) {
    return $this->blocks[$name];
  }

  /**
   * Forbid initialization by new by making the constructor private.
   * Use the \k1\app() function.
   */
  private function __construct($options = []) {
    $options = array_merge([
      'blocks' => [/* fill with file paths */],
      'templates' => [/* fill with file paths */],

      // Override languageSlugs if your site uses only one language, and it's not English
      'languageSlugs' => function_exists('pll_languages_list') ? pll_languages_list() : ['en'],

      // Paths to manifests generated by webpack-manifest-plugin
      // 'manifests' => [
      //   'client' => __DIR__ . '/dist/client-manifest.json',
      //   'admin' => __DIR__ . '/dist/admin-manifest.json'
      // ],
      'manifests' => false,
    ], $options);

    if ($options['manifests']) {
      foreach ($options['manifests'] as $name => $manifestPath) {
        $this->manifests[$name] = new AssetManifest($manifestPath, $name);
      }
    }

    $this->i18n = new i18n($options['languageSlugs']);

    /**
     * Load & initialize blocks and templates
     */

    foreach($options['templates'] as $template) {
      require_once $template;
    }

    add_action('acf/init', function() use ($options) {
      foreach ($options['blocks'] as $block) {
        require_once $block;

        $className = basename($block, '.php');
        $Class = "\\k1\Blocks\\$className";

        if (!class_exists($Class)) {
          throw new \Exception("Block $block is invalid");
        }

        $instance = new $Class($this);
        $this->blocks[$instance->getName()] = $instance;
      }
    });
  }
}
